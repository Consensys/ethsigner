---
version: 2.1

orbs:
  slack: circleci/slack@3.4.2

executors:
  executor_med:  # 2cpu, 4G ram
    docker:
      - image: circleci/openjdk:11.0.8-jdk-buster
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO             
    resource_class: medium
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx2048m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2 -Xmx2048m

  executor_large: # 4cpu, 8G ram
    docker:
      - image: circleci/openjdk:11.0.8-jdk-buster
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO     
    resource_class: large
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx4096m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Xmx4096m

  executor_machine: # 2cpu , 8G ram
    machine:
      image: ubuntu-2004:202008-01 #Ubuntu 20.04, docker 19.03, docker-compose 1.27.4
      docker_layer_caching: true
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx4096m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2 -Xmx4096m

commands:
  prepare:
    description: "Prepare"
    steps:
      - checkout
      - restore_cache:
          name: Restore cached gradle dependencies
          keys:
            - deps-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
            - deps-{{ checksum "build.gradle" }}
            - deps-

  capture_test_results:
    description: "Capture test results"
    steps:
      - run:
          name: Gather test results
          when: always
          command: |
            FILES=`find . -name test-results`
            for FILE in $FILES
            do
              MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-results@\1@'`
              TARGET="build/test-results/$MODULE"
              mkdir -p "$TARGET"
              cp -rf ${FILE}/*/* "$TARGET"
            done
      - store_test_results:
          path: build/test-results

  capture_test_reports:
    description: "Capture test reports"
    steps:
      - run:
          name: Gather test results
          when: always
          command: |
            FILES=`find . -name reports`
            for FILE in $FILES
            do
              MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/reports@\1@'`
              TARGET="build/test-reports/$MODULE"
              mkdir -p "$TARGET"
              cp -rf ${FILE}/*/* "$TARGET"
            done
      - store_artifacts:
          path: build/test-reports
          destination: test-reports

  notify:
    description: "Notify Slack"
    steps:
      - slack/status:
          fail_only: true
          only_for_branches: 'master'
          
jobs:
  build:
    executor: executor_large
    steps:
      - prepare
      - run:
          name: Build
          command: |
            ./gradlew --no-daemon --parallel build
      - run:
          name: Test
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon --parallel test
      - run:
          name: Integration Test
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon --parallel integrationTest --info
      - notify      
      - capture_test_results
      - capture_test_reports
      - save_cache:
          name: Caching gradle dependencies
          key: deps-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - .gradle
            - ~/.gradle
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./

  acceptanceTests:
    executor: executor_large
    steps:
      - prepare
      - run:
          name: Acceptance Test
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon --parallel acceptanceTest
      - notify
      - capture_test_results
      - capture_test_reports

  buildDocker:
    executor: executor_med
    steps:
      - prepare
      - setup_remote_docker
      - attach_workspace:
          at: ~/project
      - run:
          name: hadoLint
          command: |
            docker run --rm -i hadolint/hadolint < docker/Dockerfile
      - run:
          name: build image
          command: |
            ./gradlew --no-daemon distDocker
      - run:
          name: test image
          command: |
            mkdir -p docker/reports
            ./gradlew --no-daemon testDocker
      - notify            

  publish:
    executor: executor_med
    steps:
      - prepare
      - run:
          name: Install Python3
          command: |
            sudo apt update
            sudo apt install python3 python3-pip python3-venv
      - attach_workspace:
          at: ~/project
      - run:
          name: Publish
          command: |
            ./gradlew --no-daemon --parallel cloudSmithUpload publish
      - notify
      
  publishDocker:
    executor: executor_med
    steps:
      - prepare
      - setup_remote_docker
      - attach_workspace:
          at: ~/project
      - run:
          name: Publish Docker
          command: |
            docker login --username "${DOCKER_USER_RW}" --password "${DOCKER_PASSWORD_RW}"
            ./gradlew --no-daemon --parallel "-Pbranch=${CIRCLE_BRANCH}" dockerUpload
      - notify
      
workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 11 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          context:
            - dockerhub-quorumengineering-ro              
      - acceptanceTests:
          requires:
            - build
          context:
            - dockerhub-quorumengineering-ro                    
  default:
    jobs:
      - build:
          context:
            - dockerhub-quorumengineering-ro
          filters:
            tags: &filters-release-tags
              only: /^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?/
      - acceptanceTests:
          requires:
            - build
          context:
            - dockerhub-quorumengineering-ro
          filters:
            tags:
              <<: *filters-release-tags
      - buildDocker:
          requires:
            - build
          context:
            - dockerhub-quorumengineering-ro
          filters:
            tags:
              <<: *filters-release-tags
      - publish:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - build
            - acceptanceTests
          context:
            - dockerhub-quorumengineering-ro   
            - cloudsmith-protocols
      - publishDocker:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - build
            - acceptanceTests
            - buildDocker
          context:
            - dockerhub-quorumengineering-rw        